generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// tabela eventos
model Event {
  id               String     @id @default(uuid()) // Identificador único do evento
  title            String     // Nome do evento
  details          String?    // Descrição do evento (opcional)
  maximumAttendees Int?       @map("maximum_attendees") // Capacidade máxima de convidados
  slug             String     @unique // Slug único para o evento (URL amigável)
  date             DateTime   @default(now()) // Data do evento (com valor padrão)
  time             String?    // Horário do evento (opcional)
  invites          Invite[]   // Relacionamento com os convites

  @@map("events")
}

// tabela de convites
model Invite {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  createdAt DateTime @default(now()) @map("created_at")
  eventId   String   @map("event_id")

  event   Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  checkIn CheckIn?

  @@unique([eventId, email]) // Chave única composta entre eventId e email
  @@map("invites")
}

// tabela Check-in
model CheckIn {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")

  invite   Invite @relation(fields: [inviteId], references: [id], onDelete: Cascade)
  inviteId Int      @unique @map("invite_id")

  @@map("check_ins")
}

model Account {
  id        String   @id @default(uuid()) // UUID como identificador único
  name      String // Nome do usuário
  email     String   @unique // Email único
  password  String // Senha hashada
  cellphone BigInt  // Celular do usuário (tamanho ajustável)
  birthdate DateTime // Data de nascimento
  createdAt DateTime @default(now()) // Data de criação
  updatedAt DateTime @updatedAt // Data da última atualização

  logins    Login[]  // Relacionamento com a tabela Login

    @@map("accounts")
}

// Tabela Login
model Login {
  id        Int      @id @default(autoincrement())
  email     String   // Email do login
  password  String   // Senha do login
  createdAt DateTime @default(now()) // Data do login
  accountId String  // Relacionamento com a tabela Account
  
  account   Account @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@map("logins")
}